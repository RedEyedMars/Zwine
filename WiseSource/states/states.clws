import state_statements.clws
< ExternalImportEntry : \com.\rem.\parser.\generation.\classwise;
< StringEntry : \com.\rem.\parser.\generation;
class 'packageName'."states" States {
> Set<String> entersAdded = new HashSet<String>();
> Set<String> exitsAdded = new HashSet<String>();
> Set<String> listsAdded = new HashSet<String>();
> Set<String> dataVariablesAdd = new HashSet<String>();
> ~Boolean firstStateAdded = false;
> ~Integer stateId = 0;
> Body createSwitchBody = new Body ();
  @State create(int stateId){
    switch stateId `createSwitchBody`
    return null;
  }
> void setup(){
  }
> void declaration(IToken declaration){
    String stateName = 'declaration->"stateName"';
    String stateClassName = ^stateName;
    declaration : element : subState {
      String subStateName = 'element->"transitionIndex"';
      String subStateClassName = ^subStateName;
      \definition(element, stateName, stateClassName, stateName\+subStateName, stateClassName\+subStateClassName );
    }
  }
> void definition(IToken definition, String parentStateName, String parentStateClassName, String stateName, String stateClassName){
    ~boolean firstSelectedAdded = false;
    Body transitionSwitchBody = new Body ();
    Integer stateIdValue = stateId;
    State.stateVersionId \+= stateClassName.hashCode();
    createSwitchBody.add(|
      case 'stateId' {
        return new 'stateClassName'();
      }|);
    
    Long randomSerial = new Random(stateClassName.hashCode()).nextLong();
    String serialValue = randomSerial\+"L";
    String finalLong = "final long";
    States += class stateClassName / State / Serializable {
        @'finalLong' serialVersionUID = 'serialValue';
        State transition(States->\stateClassName->Transition->Id transitionId){
          if transitionId == null {
            return this;
          }
          switch transitionId `transitionSwitchBody`
          return this;
        }
        void enter(){
          State."data"."__TIMER__" = new States->'stateClassName'->Timer();
        }
        void exit(){
          State."data"."__TIMER__".end();
        }
        void display(GraphicsHandler g){
          g.clear();
          mice.clear();
        }
        int getId(){
          return 'stateIdValue';
        }
      }
    
    stateId \+= 1;
    
    Long randomTimerSerial = new Random((stateClassName\+"Timer").\hashCode()).nextLong();
    String serialTimerValue = randomTimerSerial\+"L";
    States->'stateClassName' += class Timer /State->Timer/ {
        @'finalLong' serialVersionUID = 'serialTimerValue';
      }
    States->'stateClassName'->Timer.removeMethod(States->'stateClassName'->Timer.getMethod("getSerialVersionUID"));
    States->'stateClassName' += class Actions // {
      }
    States->'stateClassName' += class Transition // {
      }
    States->'stateClassName'->Transition += enum Id // {
      }
    if firstStateAdded == false {
      Game += @State currentState = new States->'stateClassName'()
    }
    ~Integer displayLineIndex = -1;
	List<String> displayLines = new ArrayList<String>();
	List<String> choiceNameLines = new ArrayList<String > ();
	List<String> choiceEnumLines = new ArrayList<String > ();
	List<Statement > conditionStatements = new ArrayList<Statement > ();
	Body choicesDisplayBody = new Body ();
	Body descriptionDisplayBody = new Body ();
    definition : element : stateChange {
      ~Integer currentIndex = 0;
	  List<String> stateTransitionNames = new ArrayList<String>();
      ~Context context = State->Data.getContext();
      
      if element->"ENTER" != null || element->"EXIT" != null{
        Body changeBody = new Body ();
        element : atom : entry_element {
          currentIndex = \getStateEntryElement(atom,context,changeBody,stateTransitionNames,parentStateClassName, currentIndex);
        }
      
        if currentIndex > 0 {
          Integer previousIndexValue = currentIndex\-1;
          changeBody.add(|'stateTransitionNames.get(previousIndexValue)' newState = "newState"+'previousIndexValue';|);
        }
        if element->"ENTER" != null {
          States->'stateClassName'->*"enter".appendToBody(changeBody);
	    }
	    else if element->"EXIT" != null {
		  States->'stateClassName'->*"exit".appendToBody(changeBody);
	    }
        firstStateAdded = true;
	  }
	  else {
	    
	    if element->"choice_condition" != null && element->"choice_condition"->"FOR" != null {
	      Integer numberOfTransitionsToCreate = Integer.parseInt('element->"choice_condition"->"maxIndex"');
	      Integer realIndex = currentIndex;
	      for Integer eachTransition < numberOfTransitionsToCreate {
	        currentIndex = realIndex;
	        Body conditionBody = new Body ();
	        Body transitionBody = new Body ();
	        StateListName eachListName = new StateListName(element->"choice_condition"->"state_list_name",context);
	        String variableName = eachListName.getLast()\+eachListName.getPluralizer();
	        Statement conditionStatement;
	        if eachListName.getSize() == 1 {	          
	          Variable indexedElement = 'eachListName.getInnerType()' 'eachListName.getLast()' = State."data"."get"+'^variableName'().get('eachTransition');;
	          transitionBody.getContext().add(indexedElement);
	          conditionBody.getContext().add(indexedElement);
	          transitionBody.add(|`indexedElement`;|);
	          conditionBody.add(|`indexedElement`;|);
	          conditionStatement = | if State."data"."get"+'^variableName'().size() > 'eachTransition' `conditionBody`| ;
	        }
	        else {
	          Variable indexedElement = 'eachListName.getInnerType()' 'eachListName.getLast()' = `eachListName.getWithoutLast()`."get"+'^variableName'().get('eachTransition');;
	          transitionBody.getContext().add(indexedElement);
	          conditionBody.getContext().add(indexedElement);
	          transitionBody.add(|`indexedElement`;|);
	          conditionBody.add(|`indexedElement`;|);
	          conditionStatement = | if `eachListName.getWithoutLast()`."get"+'^variableName'().size() > 'eachTransition' `conditionBody`| ;
	        }
	        conditionBody.setParentContext(conditionStatement.getContext());
	        context = conditionBody.getContext();
	        currentIndex = \getStateChoiceChange(element,context,conditionStatement,choicesDisplayBody,transitionSwitchBody,transitionBody,conditionBody,null,choiceEnumLines,stateTransitionNames,stateClassName,parentStateClassName,currentIndex);
	      }
	    }
	    else {
	      Body conditionBody = new Body ();
	      Body failedConditionBody = new Body ();
	      Body transitionBody = new Body ();
	      
	      Statement conditionStatement = \getStateCondition(element->"choice_condition",context,stateClassName,conditionBody,failedConditionBody);
	      if element->"choice_condition" != null {
            conditionStatement.setParentContext(State->Data.getContext());
	        context = conditionStatement.getContext();
          }
	      currentIndex = \getStateChoiceChange(element,context,conditionStatement,choicesDisplayBody,transitionSwitchBody,transitionBody,conditionBody,failedConditionBody,choiceEnumLines,stateTransitionNames,stateClassName,parentStateClassName,currentIndex);
	    }
	  }
    }
    definition : element : stateDescription {
      StringBuilder linesBuilder = new StringBuilder();
      ~Context context = State->Data.getContext();
      Body conditionBody = new Body ();
      Statement conditionStatement = \getStateCondition(element->"description_condition",context,stateClassName,conditionBody,null);
      if element->"description_condition" != null {
        conditionBody.setParentContext(State->Data.getContext());
	    context = conditionBody.getContext();
      }
      descriptionDisplayBody.add(conditionStatement);
      
      conditionBody.add(|"g".justify(GraphicsHandler->Justified.LEFT);|);
	  element : atom : descriptionLine {
        atom : quark : descriptor {
          if quark->"special_descriptor" == null {
	        conditionBody.add(|"g".text('' " "+'quark' '');|);
          }
          else {
            quark : quanta : special_descriptor {
              ~boolean hasCharacter = false;
              quanta : string : newline {
                conditionBody.add(|"g".newline();|);
                hasCharacter = true;
              }
              : statement {
                Statement statement = \getStateStatement(string,context);
                conditionBody.add(|"g".text(''" "''\+`statement` );|);
                hasCharacter = true;
              }
              : COLON {
                conditionBody.add(|"g".text('' ":" '');|);
                hasCharacter = true;
              }
              if hasCharacter == false {
                conditionBody.add(|"g".text('' "/" '');|);
              }
            }
          }
        }
      }
    }
    States->'stateClassName'->*"display".appendToBody(descriptionDisplayBody);
    States->'stateClassName'->*"display".appendToBody({"g".newline();});
    States->'stateClassName'->*"display".appendToBody(choicesDisplayBody);
  }
> Integer getStateChoiceChange(IToken element, Context contextValue, Statement conditionStatement, Body choicesDisplayBody, Body transitionSwitchBody, Body transitionBody, Body conditionBody, Body failedConditionBody, List<String> choiceEnumLines, List<String> stateTransitionNames, String stateClassName, String parentStateClassName, Integer currentIndex) {
    ~Context context = contextValue;
    
    choicesDisplayBody.add(conditionStatement);
    Body changeBody = new Body ();
    transitionBody.setParentContext(State->Data.getContext());
    Integer indexResult = \getStateChanges(element,transitionBody.getContext(),changeBody,stateTransitionNames,parentStateClassName, currentIndex);
	~Boolean isFirstDisplay = true;
	element : atom : choiceName {
      \getStateDisplay(atom,context,      conditionBody,false, isFirstDisplay,element->"choice_condition" != null);
      if failedConditionBody != null {
        \getStateDisplay(atom,context,failedConditionBody,true,isFirstDisplay,element->"choice_condition" != null);
      }
      isFirstDisplay = false;
    }
    if failedConditionBody != null {
      failedConditionBody.add(|"g".newline();|);
      failedConditionBody.add(|"g".styleEnd();|);
    }
    conditionBody.add(|"g".newline();|);
    
    String choiceEnumClass = "Transition_"\+choiceEnumLines.size();
    States->'stateClassName'->\Actions += class choiceEnumClass // {}
    States->'stateClassName'->\Actions->'choiceEnumClass' += class Chose /MouseHandler->Action/ {
      States->'stateClassName' state = null;
      void act(){
        Game.transition(state.transition(States->'stateClassName'->\Transition->\Id->'choiceEnumClass'));
      }
    }
    conditionBody.add(|"mice".add("g".sectionEnd(new States->'stateClassName'->\Actions->'choiceEnumClass'->Chose(this),null,null));|);
	    
	
	transitionBody.add(changeBody);
	transitionBody.add(|return "newState";|);
	    
    transitionSwitchBody.add(|case 'choiceEnumClass' `transitionBody`|);
    States->'stateClassName'->\Transition->\Id += void 'choiceEnumClass' = null
	choiceEnumLines.add('choiceEnumClass');
	return indexResult;
  }
> void getStateDisplay(IToken atom, Context context, Body conditionBody, boolean isFail, boolean isFirst, boolean isInCondition) {
    if isFirst {
      if isFail == false {
        conditionBody.add(|"g".sectionStart();|);
      }
      conditionBody.add(|"g".newline();|);
      if isFail {
        conditionBody.add(|"g".styleStart(Color.gray,null);|);
      }
      conditionBody.add(|"g".justify(GraphicsHandler->Justified.CENTER);|);
    }
    atom : quark : descriptor {
      if isInCondition {
        context.setParent(State->Data.getContext());
      }
      if quark->"special_descriptor" == null {
        conditionBody.add(|"g".text('' " "+'quark' '');|);
      }
      else {
        quark : quanta : special_descriptor {
          ~boolean hasCharacter = false;
          quanta : string : newline {
            conditionBody.add(|"g".newline();|);
            hasCharacter = true;
          }
          : statement {
            Statement statement = \getStateStatement(string,context);
            conditionBody.add(|"g".text(''" "''\+`statement` );|);
            hasCharacter = true;
          }
          : COLON {
            conditionBody.add(|"g".text('' ":" '');|);
            hasCharacter = true;
          }
          if hasCharacter == false {
            conditionBody.add(|"g".text('' "/" '');|);
          }
        }
      }
    }
  }
> Integer getStateEntryElement(IToken atom, Context context, Body changeBody, List<String> stateTransitionNames, String parentStateClassName, Integer initialIndex){
   ~Integer currentIndex = initialIndex;
   if atom->"body_element" != null {
     atom : element : body_element {
       changeBody.add(\getStateBodyElement(element,context));
     }
   }
   else if atom->"PLUS" != null {
     if dataVariablesAdd.add('atom->"newVariable"'){
       Statement variableName = new Statement();
       variableName.set(".");
       variableName.add(|State|);
       variableName.add(|"data"|);
       atom : quark : variableName {
         variableName.add(|'"get"+^quark'()|);
       }
       Statement newVariableAssignment;
       String newVariableType;
       if atom->"statement" != null {
         newVariableAssignment =  \getStateStatement(atom->"statement", context);
         if atom->"type_name" != null {
           newVariableType = \getTypeName(atom->"type_name");
         }
         else {
           newVariableType = \determineType(atom->"statement",context);
         }
       }
       else {
         newVariableAssignment =  \getDynamicStateName(atom->"state_name",parentStateClassName);
         newVariableType = "State";
       }
       String newVariableName = 'atom->"newVariable"';
            
       State->Data += 'newVariableType' 'newVariableName' = null
       State->Data->Variables += 'newVariableType' 'newVariableName' = null
       State->Data += void '"set"+^newVariableName'('newVariableType' '"new"+^newVariableName'){
         if 'newVariableName' == null {
           'newVariableName' = '"new"+^newVariableName';
         }
       }
       \addStorageElement('newVariableType', 'newVariableName', State->Data);
       changeBody.add(|`variableName`."set"+'^newVariableName'(`newVariableAssignment`);|);
     }
   }
   else if atom->"PLUSEQUALS" != null || atom->"MINUSEQUALS" != null{
     StateListName stateListName = new StateListName(atom->"state_list_name", context);
     Statement newVariableAssignment;
     String listType;
     if atom->"statement" != null {
       newVariableAssignment =  \getStateStatement(atom->"statement", context);
       listType = \determineType(atom->"statement",context);
     }
     else {
       newVariableAssignment =  \getDynamicStateName(atom->"state_name",parentStateClassName);
       listType = "State";
     }
     if stateListName.getSize() == 1 && listsAdded.add(stateListName.getLast()) {
       String newVariableType = \addListVariable(stateListName.getLast(), stateListName.getPluralizer(), 'listType', State->Data);
          
       String newVariableName = stateListName.getLast() \+ stateListName.getPluralizer();
       State->Data.acceptSwitchBody.add(|case 'newVariableName' { '"set"+^newVariableName'(('newVariableType')"toSet"); "break";}|);
       \addStorageElement('newVariableType', 'newVariableName', State->Data);
     }
     String lastVariableName = stateListName.getLast();
     if atom->"PLUSEQUALS" != null {
       changeBody.add(|`stateListName.getWithoutLast()`.'"add"+^lastVariableName'(`newVariableAssignment`);|);
     }
     else {
       changeBody.add(|`stateListName.getWithoutLast()`.'"remove"+^lastVariableName'(`newVariableAssignment`);|);          
     }
   }
   else if atom->"EQUALSIGN" != null {
     List<String> variableNames = new ArrayList<String>();
     atom : quark : variableName {
       variableNames.add(^quark);
     }
     Statement  changeToAdd = new Statement ();
     changeToAdd.set(".");
     changeToAdd.add(|State|);
     changeToAdd.add(|"data"|);
     for Integer i < variableNames.size() \-1 {
       changeToAdd.add(|"get"+'variableNames.get(i)'()|);
     }
     Context theContext = context;
     Statement argument;
     if atom->"statement" != null {
       argument = \getStateStatement(atom->"statement", theContext);
     }
     else {
       argument = \getDynamicStateName(atom->"state_name",parentStateClassName);
     }
     changeToAdd.add(|"set"+'variableNames.get(variableNames.size() \-1)'(`argument`)|);
     changeBody.add(|`changeToAdd`;|);
   }
   else if atom->"transition" != null {
     atom : quark : entry_element {
       currentIndex = \getStateEntryElement(quark,context,changeBody,stateTransitionNames,parentStateClassName,currentIndex);
     }
     atom : quark : transition {
      Integer currentIndexValue = currentIndex;
      Integer previousIndexValue = currentIndex\-1;
      currentIndex \+= 1;
      if currentIndexValue == 0 {
        changeBody.add(| \exit(); |);
      }
      else {
        changeBody.add(| "newState"+'previousIndexValue'.\exit();|);
      }
      if quark->"timed" != null {
        #############################
      }
      if quark->"state_statement" != null {
        Statement newStateStatement = \getStateStatement(quark->"state_statement"->"statement",context);
        changeBody.add(| State "newState"+'currentIndexValue' = `newStateStatement`;|);
        stateTransitionNames.add("State");
      }
      else {
        String transitionStateClassName;
        if quark->"transitionStateName" != null {
          transitionStateClassName = ^quark->"transitionStateName" \+ ^quark->"transitionIndex";
        }
        else {
          transitionStateClassName = parentStateClassName \+ ^quark->"transitionIndex";
        }
        stateTransitionNames.add(transitionStateClassName);
        changeBody.add(| States->'transitionStateClassName' "newState"+'currentIndexValue' = new 'transitionStateClassName'();|);
      }
      changeBody.add(|"newState"+'currentIndexValue'.enter();|);
    }
    }
    return currentIndex;
  }
> Statement getDynamicStateName(IToken state_name, String parentStateClassName){
    String transitionStateClassName;
    if state_name->"transitionStateName" != null {
      transitionStateClassName = ^state_name->"transitionStateName" \+ ^state_name->"transitionIndex";
    }
    else {
      transitionStateClassName = parentStateClassName \+ ^state_name->"transitionIndex";
    }
    return |new `transitionStateClassName`()|;
  }
> Statement getStateCondition(IToken stateCondition, Context context, String stateClassName, Body conditionBody, Body failedConditionBody){
    if stateCondition == null {
      return conditionBody;
    }
	if stateCondition->"boolean_statement" != null{
	  Statement conditionStatement = \getStateBooleanStatement(stateCondition->"boolean_statement",context);
	  if failedConditionBody == null || stateCondition->"ONLY" != null {
	    return |if `conditionStatement` `conditionBody`|;
	  }
	  else {
	    return |if `conditionStatement` `conditionBody` else `failedConditionBody`|;
	  }    
	}
	else if stateCondition->"timed" != null {
	  Integer milliseconds;
	  if stateCondition->"MS" != null {
	    milliseconds = (int)(Float.parseFloat('stateCondition->"timed"'));
	  }
	  else {
	    milliseconds = (int)(Float.parseFloat('stateCondition->"timed"'))*1000;
	  }
	  States->'stateClassName'->\Timer->*.prependToBody({\listen('milliseconds'+"L");});
	  if failedConditionBody == null || stateCondition->"ONLY" != null {
	    return |if State."data"."__TIMER__".getTimeSinceStart() >= 'milliseconds' `conditionBody`|;
	  }
	  else {
	    return |if State."data"."__TIMER__".getTimeSinceStart() >= 'milliseconds' `conditionBody` else `failedConditionBody`|;
	  }
	}
	else {
	  StateListName eachListName = new StateListName(stateCondition->"state_list_name",context);
	  String variableName = eachListName.getLast()\+eachListName.getPluralizer();
	  if eachListName.getSize() == 1 {
	    conditionBody.getContext().add('eachListName.getInnerType()' 'eachListName.getLast()' = null;);
	    return | for 'eachListName.getInnerType()' 'eachListName.getLast()' : "get"+'^variableName'() `conditionBody`| ;
	  }
	  else {
	    conditionBody.getContext().add('eachListName.getInnerType()' 'eachListName.getLast()' = null;);
	    return | for 'eachListName.getInnerType()' 'eachListName.getLast()' : `eachListName.getWithoutLast()`."get"+'^variableName'() `conditionBody`|;
	  }
	}
  }
> Integer getStateChanges(IToken element, Context context, Body changeBody, List<String> stateTransitionNames, String parentStateClassName, Integer currentIndexValue){
    ~Integer currentIndex = currentIndexValue;
    element : atom : entry_element {
      if element->"choice_condition" != null {
        context.setParent(State->Data.getContext());
      }
      currentIndex = \getStateEntryElement(atom,context,changeBody,stateTransitionNames,parentStateClassName, currentIndex);
    }
    if currentIndex > 0 {
      Integer previousIndexValue = currentIndex\-1;
      changeBody.add(|'stateTransitionNames.get(previousIndexValue)' newState = "newState"+'previousIndexValue';|);
    }
    return currentIndex;
  }
> Integer handleLines(String input, List<String> displayLines, Integer displayLineIndexValue){
    ~Integer displayLineIndex = displayLineIndexValue;
    displayLineIndex \+= 1;
	Integer displayLineIndexStartValue = displayLineIndex;
	~StringBuilder currentLine = new StringBuilder();
	~StringBuilder currentWord = new StringBuilder();
	~Integer currentLineCount = 0;
	for int i < input.length() {
	  char c = input.charAt(i); 
	  if (""\+c).\matches("[a-zA-Z0-9]") {
	    currentWord.append(c);
	  }
	  else {
	    ~boolean justLined = false;
	    if currentLineCount\+'currentWord'.length() > 100 {
	      displayLineIndex \+= 1;
	      displayLines.add('currentLine');
	      currentLine = new StringBuilder();
	      currentLineCount = 0;
	      justLined = true;
	    }
        if currentLineCount != 0 || 'currentWord'.length() != 0 || (""\+c).\matches("[ \\t]") == false {         
	      currentLine.append('currentWord');
	      if (""\+c).\equals("\n"){
	        if justLined == false {
	          displayLineIndex \+= 1;
	          displayLines.add('currentLine');
	          currentLine = new StringBuilder();
	          currentLineCount = 0;
	        }
	      }
	      else {
	        currentLine.append(c);
	        currentLineCount \+= 'currentWord'.length()\+1;
	      }
	      currentWord = new StringBuilder();
	    }
	  }
	}
	if currentLineCount\+'currentWord'.length() > 100 {
	  displayLineIndex \+= 1;
	  displayLines.add('currentLine');
	  currentLine = new StringBuilder();
	}
	currentLine.append('currentWord');
	displayLines.add('currentLine');
	return displayLineIndex;
  }
}
class 'packageName'."states" State {

> ~Integer stateVersionId = 0;
  interface Acceptor // {
    void load(DataReader reader, State->Acceptor acceptor ) throws IO, ClassNotFound{}
    void accept(State->Data->Variables variable, Object toSet){}
  }
  class Timer /Thread/Serializable {
    >String finalLong = "final long";
    @'finalLong' serialVersionUID = "55427430L";
    @Integer UNSTARTED = -1;
    @Integer WAITING = 0;
    @Integer PROCESSING = 1;
    @Integer FINISHED = 2;
    ~Boolean running = true;
    ~Set<Long> timesToWaitFor = new TreeSet<Long>();
    ~Long startTime = "-1L";
    ~Long endTime = "-1L";
    ~Integer status = UNSTARTED;
    Long getTimeSinceStart(){
      return System.currentTimeMillis() \- startTime;
    }
    void listen(Long newTime){
      timesToWaitFor.add(newTime); 
    }
    void start(){
      running = true;
      super.start();
    }
    void end(){
      running = false;
      if status == WAITING {
        synchronized this {
          this.notifyAll();
        }
      }
      try {
        \join();
      }
      print catch *{}
    }
    void run() {
      if endTime != -1 {
        startTime = System.currentTimeMillis()\-(endTime\-startTime);
      }
      try {
        if Game.running && running {
          for Long time : timesToWaitFor {
            Long timeSinceStart = \getTimeSinceStart();
            if time - timeSinceStart >= 0 {
              synchronized this {
                status = WAITING;
                \wait(time - timeSinceStart);
                status = PROCESSING;
                if Game.running && running {
                  Game.refresh();
                }
                else {
                  endTime = System.currentTimeMillis();
                  "break";
                }
              }
            }
          }
        }
      }
      print catch * {}
      status = FINISHED;
    }
  }
  class 'packageName'."states" Data Object State->Acceptor {
    ~State->Timer __TIMER__ = null;
    enum Variables // {}
    class EmptyFile //State->Acceptor {
      void load(DataReader reader, State->Acceptor acceptor ) {
        State.data = (State->Data)acceptor;
        Game.currentState.enter();
      }
      void accept(State->Data->Variables variable, Object toSet){
	  }
      void save(DataWriter writer) throws IO{
        writer.writeVersion(`\getVersionId()`);
        writer.writeState();
      }
    }
    class OldVersion // {
      @Map<Integer, State\>Acceptor> map = new HashMap<Integer, State\>Acceptor>();
      @boolean hasSetup = false;
      @void setup(){
        if hasSetup {
          return void;
        }
	    hasSetup = true;
      }
    }
    void write(String saveFile){
      DataWriter writer = new DataWriter(saveFile);
      try {
        \save(writer);
      }
      print catch IO {}
      writer.close();
    }
    void read(String saveFile){
      DataReader reader = new DataReader(saveFile);
      try {
        try {
          \load(reader, this);
        }
        print catch ClassNotFound {}
      }
      print catch IO {}
      reader.close();
    }
    void save(DataWriter writer) throws IO{
      writer.writeVersion(`\getVersionId()`);
      writer.writeState();
    }
    void load(DataReader reader, State->Acceptor acceptor ) throws IO, ClassNotFound{
      State->Acceptor correctState = reader.correctStateFromVersion(this); 
      if correctState != this {
        correctState.load(reader, this);
        return void;
      }
      Game.currentState = reader.readState();
    }
    > Body acceptSwitchBody = new Body ();
    void accept(State->Data->Variables variable, Object toSet){
      switch variable `acceptSwitchBody`
    }
    @void loadFile(String fileName){
      State->Data data = new State->Data();
      data.read( fileName );
      State.data = data;
    }
    > void output(){
      ~Integer newVersion = 7;
      for String key:\variables.keySet() {
        newVersion += key.hashCode();
        StringBuilder typeBuilder = new StringBuilder();
        \variables.get(key).getType().get(typeBuilder);
        newVersion += 'typeBuilder'.hashCode();
      }
      newVersion *= \variables.keySet().size();
      newVersion *= stateVersionId;
      try {
        Set<Integer> oldVersions = new HashSet<Integer>();
        DataInputStream inStream = new DataInputStream(new FileInputStream("../Resource/old.versions"));
        try {
        ~Integer nextId = inStream.readInt();
        while nextId != -1 {
          oldVersions.add(nextId);
          nextId = inStream.readInt();
        }
        }
        catch EOF {}
        inStream.close();
        \setVersionId(newVersion);
        if oldVersions.add(newVersion){
          DataOutputStream outStream = new DataOutputStream(new FileOutputStream("../Resource/old.versions"));
          for Integer v : oldVersions {
            outStream.writeInt(v);
          }
          outStream.close();
          String newDataClassName;
          if newVersion < 0 {
            newDataClassName = "DataNeg"\+(-1*version.getId());
          }
          else {
            newDataClassName = "Data"\+version.getId();
          }
          class 'packageName'."old"."data" newDataClassName Object State->Acceptor {
            void accept(State->Data->Variables variable, Object toSet){}
          }
          \newDataClassNameClass.addMethod(\methods.get("load[DataReader,State.Acceptor]"));
          \newDataClassNameClass.setDisplayConstructors(false);
        }
        for Integer oldVersionId : oldVersions {
          String oldDataClassName;
          if oldVersionId < 0 {
            oldDataClassName = "DataNeg"\+(-1*oldVersionId);
          }
          else {
            oldDataClassName = "Data"\+oldVersionId;
          }
          ExternalImportEntry.solidPackages.put(oldDataClassName, 'packageName'\+".old.data");
          State->Data.addImport(new ExternalImportEntry.ImportEntry(new StringEntry(oldDataClassName)));
          State->Data->OldVersion->*"setup".appendToBody({
              State->Data->OldVersion.map.put('oldVersionId', new 'oldDataClassName'());
            });
        }
      }
      print catch *{}
    }
  }
  @State->Data data = null;
  ~List<MouseHandler> mice = new ArrayList<MouseHandler>();
  int getId(){
    return -1;
  }
  void enter(){
  }
  void exit(){
  }
  void display(GraphicsHandler g){
  }
  void mouseRelease(int x, int y){
    for MouseHandler mouse:mice {
      mouse.release(x,y);
    }
  }
  void mousePress(int x, int y){
    for MouseHandler mouse:mice {
      mouse.press(x,y);
    }
  }
  void mouseHover(int x, int y){
    for MouseHandler mouse:mice {
      mouse.hover(x,y);
    }
  }
  void keyPress(int keyCode){
  }
}
> class 'packageName'."misc" StateListName {
> ~String pluralizer = "";
> Statement withoutLast = new Statement();
> ~String last = null;
> ~String previous = null;
> ~Integer size = 0;
> ~String innerType = null;
> ~String lastType = null;
> StateListName *(IToken atom, Context context){
    withoutLast.set(".");
    withoutLast.add(|State|);
    withoutLast.add(|"data"|);
    ~Context currentContext = context;
    if atom->"pluralizer" != null {
      pluralizer = 'atom->"pluralizer"';
    }
    atom : quark : variableName {
      if previous != null {
        withoutLast.add(|'"get"+^previous'()|);
      }
      last = 'quark';
      previous = 'quark';  
      size \+= 1;
      if currentContext.hasLink(last) {
        currentContext = currentContext.link(last);
        if pluralizer == null && currentContext.hasLink(last) {
          lastType = currentContext.type(last);
        }
      }
    }
    if pluralizer != null {
      if currentContext.hasLink(last\+pluralizer) {
        lastType = currentContext.type(last\+pluralizer);
      }
    }
    if lastType != null {
      Integer indexOfAngle = lastType.indexOf("<");
      if indexOfAngle > -1 {
        innerType = lastType.substring(indexOfAngle\+1, lastType.lastIndexOf(">"));
      }
    }
  }
}