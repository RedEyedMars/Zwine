< Font : \java.\awt;
class 'packageName'."gui" GraphicsHandler {
  
  enum Justified //{
    void LEFT;
    void RIGHT;
    void CENTER;
  }
  Integer startX = 0;
  Integer startY = 0;
  ~int x = 0;
  ~int y = 0;
  Integer width = 0;
  Integer height = 0;
  ~List<GraphicsHandler\>Element> elements = new ArrayList<GraphicsHandler\>Element>();
  ~int cWidth = 6;
  ~int cHeight = 12;
  ~int xPad = 6;
  ~int yPad = 3;
  ~boolean cropWhiteSpace = true;
  ~int sectionX = 0;
  ~int sectionY = 0;
  ~GraphicsHandler->Element->Text->Line currentLine = null;
  ~Color defaultColour = Color.white;
  ~Font defaultFont = new Font(''"Arial"'',Font.PLAIN, 12);
  
  ~GraphicsHandler->Element->Style currentStyle = new GraphicsHandler->Element->Style(Color.white, new Font(''"Arial"'',Font.PLAIN, 12)); 
  void sectionStart(){
    sectionX = x;
    sectionY = y\-5;
  }
  MouseHandler sectionEnd(MouseHandler->Action onRelease,MouseHandler->Action onPress,MouseHandler->Action onHover){
    MouseHandler result = new MouseHandler(startX, sectionY, startX\+width,y\-5);
    result.setOnRelease(onRelease);
    result.setOnPress(onPress);
    result.setOnHover(onHover);
    elements.add(result.selection());
    return result;
  }
  void styleStart(Color colour, Font font){
    currentStyle = new GraphicsHandler->Element->Style(colour,font);
  }
  void styleEnd(){
    currentStyle = new GraphicsHandler->Element->Style(defaultColour,defaultFont);
  }
  void text(String newString){
    this.text(newString, null, null);
  }
  void text(String newString, Color newColor){
    this.text(newString, newColor, null);
  }
  void text(String newString, Font newFont){
    this.text(newString, null, newFont);
  }
  void text(String newString, Color newColor, Font newFont){
    if cropWhiteSpace {
      int firstNonSpace = 0;
      while firstNonSpace < newString.length() {
        if newString.charAt(firstNonSpace) != "' '" {
          "break";
        }
        firstNonSpace \+= 1;
      }
      if firstNonSpace > 0 {
        newString = newString.substring(firstNonSpace);
      }
    }
    if newString.length() == 0 {
      return void;
    }
    if x\+newString.length()*cWidth > startX\+width {
      x = startX;
      y \+= cHeight \+ yPad;
      cropWhiteSpace = true;
      currentLine = new GraphicsHandler->Element->Text->Line(startX,y,width,cWidth,xPad);
      elements.add(currentLine); 
    }
    if newColor == null && newFont == null {
      GraphicsHandler->Element->Text newText = new GraphicsHandler->Element->Text(newString,x,y);
      newText.setStyle(currentStyle);
      currentLine.add(newText);
    }
    else {
      GraphicsHandler->Element->Text newText = new GraphicsHandler->Element->Text(newString,x,y);
      newText.setStyle(new GraphicsHandler->Element->Style(newColor,newFont));
      currentLine.add(newText);
    }
    x += newString.length()*cWidth\+xPad;
  }
  void newline(){
    x = startX;
    y \+= cHeight \+ 3;
    cropWhiteSpace = true;
    currentLine = new GraphicsHandler->Element->Text->Line(startX,y,width,cWidth,xPad);
    elements.add(currentLine);
  }
  void justify(Justified newJustify){
    currentLine.setJustified(newJustify);
  }
  void display(Graphics g){
    GraphicsHandler->Element->Style style = null;
    for GraphicsHandler->Element element: elements {
      style = element.display(g,style);
    }
  }
  void clear(){
    elements.clear();
    x = startX;
    y = startY;
    elements.add(new GraphicsHandler->Element->Style(Color.white));
    currentLine = new GraphicsHandler->Element->Text->Line(startX,y,width,cWidth,xPad);
    elements.add(currentLine); 
  }
  class Element // {
    GraphicsHandler->Element->Style display(Graphics g, GraphicsHandler->Element->Style s){
      return null;
    }
    class Style /GraphicsHandler->Element/ {
      ~Color colour = null;
      ~Font font = null;
      Style *(Color newColour){
        colour = newColour;
      }
      Style *(Font newFont){
        font = newFont;
      }
      Style *(Color newColour, Font newFont){
        colour = newColour;
        font = newFont;
      }
      GraphicsHandler->Element->Style display(Graphics g, GraphicsHandler->Element->Style s){
        if s != this {
          if colour != null {
            g.setColor(colour);
          }
          if font != null {
            g.setFont(font);
          }
        }
        return this;
      }
    }
    class Text /GraphicsHandler->Element/ {
      String text = null;
      Integer x = 0;
      Integer y = 0;
      ~GraphicsHandler->Element->Style style = null;
      int length(){
        return text.length();
      }
      void setX(int newX){
        x = newX;
      }
      GraphicsHandler->Element->Style display(Graphics g, GraphicsHandler->Element->Style s){
        if style != null {
          s = style.display(g,s);
        }
        g.drawString(text,x,y);
        return s;
      }
      class Line /GraphicsHandler->Element/ {
        ~Justified justified = Justified.LEFT;
        Integer startX = 0;
        Integer y = 0;
        Integer width = 0;
        Integer cWidth = 0;
        Integer xPad = 0;
        ~List< Text > texts = new ArrayList< Text >();
        void add(Text newText){
          texts.add(newText);
        }
        GraphicsHandler->Element->Style display(Graphics g, GraphicsHandler->Element->Style s){
          switch justified {
            case "LEFT" {
              for Text text: texts {
                s = text.display(g,s); 
              }
              return s;
            }
            case "CENTER" {
              int x = startX\+width/2;
              for Text text: texts {
                x \-= (text.length()*cWidth\+xPad)/2;
              }
              for Text text: texts {
                int storedX = text.getX();
                text.setX(x);
                x \+= text.length()*cWidth\+xPad;
                s = text.display(g,s);
                text.setX(storedX);
              }
              return s;
            }
            case "RIGHT" {
              int x = startX\+width;
              for Text text: texts {
                x \-= text.length()*cWidth\+xPad;
              }
              for Text text: texts {
                int storedX = text.getX();
                text.setX(x);
                x \+= text.length()*cWidth\+xPad;
                s = text.display(g,s);
                text.setX(storedX);
              }
              return s;
            }
          }
          return s;
        }
      }
    }
    class Selection /GraphicsHandler->Element/ {
      Integer u = 0;
      Integer w = 0;
      Integer x = 0;
      Integer y = 0;
      
      ~boolean show = false;
      ~Color colour = Color.white;
      GraphicsHandler->Element->Style display(Graphics g, GraphicsHandler->Element->Style s){
        if s == null || s.getColour() != colour {
          g.setColor(colour);
          if show {
            g.drawRoundRect(u,w,x,y,15,10);
          }
          if s != null {
            return s.display(g,s);
          }
          else {
            return null;
          }
        }
        else {
          if show {
            g.drawRoundRect(u,w,x-u,y-w,15,10);
          }
          return s;
        }
      }
    }
  }
}
class 'packageName'.gui MouseHandler {
  ~MouseHandler->Action onRelease = null;
  ~MouseHandler->Action onPress = null;
  ~MouseHandler->Action onHover = null;
  Integer originX = 0;
  Integer originY = 0;
  Integer extentX = 0;
  Integer extentY = 0;
  ~GraphicsHandler->Element->Selection selection = null;
  void bound(int u, int w, int x , int y){
    originX = u;
    originY = w;
    extentX = x;
    extentY = y;
  } 
  void release(int x, int y){
    if x >= originX && x <= extentX && y >= originY && y <= extentY {
      if onRelease != null {
        onRelease.act();
      }
    }
  }
  void press(int x, int y){
    if x >= originX && x <= extentX && y >= originY && y <= extentY {
      if onPress != null {
        onPress.act();
      }
    }
  }
  void hover(int x, int y){
    if x >= originX && x <= extentX && y >= originY && y <= extentY {
      if onHover != null {
        onHover.act();
      }
      if selection != null {
        if selection.getShow() == false {
          selection.setShow(true);
          Gui.refresh();
        }
      }
    }
    else {
      if selection != null {
        if selection.getShow() == true {
          selection.setShow(false);
          Gui.refresh();
        }
      }
    }
  }
  GraphicsHandler->Element->Selection selection(){
    if selection == null {
      selection = new GraphicsHandler->Element->Selection(originX,originY,extentX,extentY);
    }
    return selection;
  }
  class Action // {
    void act(){
    }
  }
}