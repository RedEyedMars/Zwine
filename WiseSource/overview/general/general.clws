
class 'packageName'."misc" Range {
  Integer start = 0;
  Integer end = 0;
}

class 'packageName'."events" Events {
> void declaration(IToken declaration){
  }
}
class 'packageName'."events" Event {
}

> Body getBodyElements(IToken elementsToken, Context context){
    Body result = new Body ();
    result.setParentContext(context);
    elementsToken : element : body_element {
      result.add(\getBodyElement(element,result.getContext()));
    }
    return result;
  }
> Statement getBodyElement(IToken elementToken, Context context){
    elementToken : element
      : statement {
        return | `\getStatement(element, context)` ; | ;
      }
      : return_statement {
        if element->"VOID" != null {
          return |return void;|;
        }
        else {
          return |return `\getStatement(element, context)`;|;
        }
      }
	  : variable_declaration {
	    return \getVariableDeclaration(element, context);
	  }
	  : assignment {
	    return |`\getSetVariableCall(element->"variable_call", context)`(`\getStatement(element->"statement", context)`);|;
	  }
      : if_statement {
        return \getIfStatement(element, context);
      }
      : for_statement {
        return \getForStatement(element, context);
      }
    return null;
  }
> Statement getVariableDeclaration(IToken variableDeclarationToken, Context context){
	String typeName = \getTypeName(variableDeclarationToken->"variable_header"->"type_name");
    Context type = context.getClassContext(typeName);
    if type == null {
      throw \Generator.completeTokenErrorMessage(variableDeclarationToken) + "Could not find type:" + typeName + "!";
    }
    if variableDeclarationToken->"statement" != null {
      return | 'typeName' 'variableDeclarationToken->"variable_header"->"variableName"' = `\getStatement(variableDeclarationToken->"statement", context)`; |;
    }
    else {
      return | 'typeName' 'variableDeclarationToken->"variable_header"->"variableName"' = null; |;
    }
  }
> Variable addVariableHeader(IToken variableHeaderToken, Class inputClass){
    String typeName = \getTypeName(variableHeaderToken->"type_name");
    Context type = inputClass.getContext().getClassContext(typeName);
    if type == null {
      throw \Generator.completeTokenErrorMessage(variableHeaderToken) + "Could not find type:" + typeName + "!";
    }
    inputClass += 'typeName' 'variableHeaderToken->"variableName"'
    return inputClass.getVariable('variableHeaderToken->"variableName"');
  }
> Statement getIfStatement(IToken ifStatementToken, Context context){
    Statement header     = new Statement ();
    Statement elseHeader = new Statement ();
    Body      body       = new Body ();
    Body      elseBody   = new Body ();
    ~Integer   mode       = 0;
    ifStatementToken : element
      : boolean_statement {
        header.add(\getBooleanStatement(element, context));
      }
      : body_element {
        body.add(\getBodyElement(element, context));
      }
      : else_statement {
        mode = 1;
        element : atom
          : body_element {
            elseBody.add(\getBodyElement(atom,context));
          }
          : boolean_statement {
            elseHeader.add(\getBooleanStatement(atom,context));
            mode = 2;
          }
      }
    if      mode == 0 { return |if `header` `body`                                 |; }
    else if mode == 1 { return |if `header` `body` else                 `elseBody` |; }
    else if mode == 2 { return |if `header` `body` else if `elseHeader` `elseBody` |; }
    else              { return null;                                              }
  }
> Statement getForStatement(IToken forStatementToken, Context context){
    
    if forStatementToken->"fromList" != null {
      IToken variableHeaderToken = forStatementToken->"fromList"->"variable_header";
      String typeName = \getTypeName(variableHeaderToken->"type_name");
      Context type = context.getClassContext(typeName);
      if type == null {
        throw \Generator.completeTokenErrorMessage(variableHeaderToken) + "Could not find type:" + typeName + "!";
      }
      context.add('typeName' 'variableHeaderToken->"variableName"';);
      Statement right = \getStatement(forStatementToken->"fromList"->"statement", context) ;
      Body body = \getBodyElements(forStatementToken, context);
      return |for 'typeName' 'variableHeaderToken->"variableName"' : `right` `body`|;
    }
    return null;
  }


> Statement getBooleanStatement(IToken booleanStatement, Context context){
    return \getBooleanStatement(booleanStatement, false, context);
  }
> Statement getBooleanStatement(IToken booleanStatement, Boolean negate, Context context){
    Statement operator = new Statement();
    booleanStatement : element
    	: has_chance {
    		operator.add(\getChance(element));
    	  }
    	: statement {
     	    operator.add(\getStatement(element,negate,context));
    	  }
    	: operator {
     	    if 'element' == "&" {
     	      if negate {
     	        operator.set("||");
     	      }
     	      else {
     	        operator.set("&&");
     	      }
            }
            else if 'element' == "|" {
               if negate {
                 operator.set("&&");
               }
               else {
                 operator.set("||");
               }
            }
    	  }
     return operator;
  }
> Statement getStatement(IToken statementToken, Context context){
    return \getStatement(statementToken,false,context);
  }
> Statement getStatement(IToken statementToken,Boolean initialNegate, Context context){
	Statement ret = new Statement();
	~Boolean negate = initialNegate;
	statementToken : element
		: NOT { negate =! negate; }
		: variable_call {
			Statement variableCall = \getVariableCall(element,context);
			ret.add(variableCall);
		}
		: statement {
			Statement subStatement = \getStatement(element,context);
			ret.add(subStatement);
		}
		: operator {
		    if negate {
		      ret.set(\negateOperator('element'));
		    }
		    else {
			  ret.set('element');
			}
		}
		: braced {
			Statement subStatement = \getStatement(element,context);
			subStatement.brace();
			ret.add(subStatement);
		}
	if ret.getSize() == 1 && negate {
	  ret.negate();
	}
	return ret;
  }

> Statement getVariableCall(IToken variableCallToken, Context context){
	~Context currentContext = context;
	Statement ret = new Statement(".");
	variableCallToken : element
	  : range {
	    ret.add(|new Range('element->"left"','element->"right"')|);
	  }
	  : braced {
		Statement subStatement = \getStatement(element,context);
		subStatement.brace();
		ret.add(subStatement);
	  }
	  : exact {
	    if element->"FLOAT" != null {
	      ret.add(|'element'+"f"|);
	    }
	    else {
	      ret.add(|'element'|);
	    }
	  }
	  : quote {
	    ret.add(|''element''|);
	  }
	  : cast {
	    String typeName = \getTypeName(element->"type_name");
	    Context typeContext = currentContext.getClassContext(typeName);
	    if typeContext == null {
		    throw "Could not find "+'typeName'+" type in context!";
		}
		
	    Statement castStatement = new Statement ();
	    castStatement.add(|$'typeName'|);
	    castStatement.brace();
	    Statement fullStatement = new Statement();
	    fullStatement.add(castStatement);
	    fullStatement.add(\getStatement(element->"statement",context));
		ret.add(fullStatement);
	  }
	  : variableName {
	  	currentContext = currentContext.link('element'); 
		if currentContext == null {
		    throw "Could not find "+'element'+" variable in context!";
		}
		if  ret.size() == 0 {
		  ret.add(|'element'|);
		}
		else {
		  ret.add(|'"get"+^element'()|); #MIGHT HAVE TO IMPLEMENT ^'X'#
		}
	  }
	  : method {
		String methodName;
		if element->"methodName" != null {
		  methodName = 'element->"methodName"';
		}
		else {
		  methodName = \getTypeName(element->"type_name");
		}
		Parameters parameters = new Parameters();
		element : atom
		  : statement {
			parameters.add(\getStatement(atom,context));
		  }
		if element->"NEW" != null {
          currentContext = currentContext.getClassContext(methodName);
		  if currentContext == null {
		    throw "Could not find \"+methodName+\" type in context!";
		  }
		  ret.add(|new 'methodName'(`parameters`)|);
		}
	  	else {
		  currentContext = currentContext.link(methodName);
		  if currentContext == null {
		    throw "Could not find "+'element'+" method in context!";
		  }
		  ret.add(|'element'(`parameters`)|);
		}
	  }
	if currentContext != null && currentContext.hasEnder() {
	  ret.add(currentContext.getEnder());
	}
	return ret;
  }
> Statement getSetVariableCall(IToken variableCallToken, Context context){
	~Context currentContext = context;
	Statement ret = new Statement(".");
	~Integer callCount = -1;
	variableCallToken : element
	  : range {  callCount \+= 1; }
	  : braced { callCount \+= 1; }
	  : exact {  callCount \+= 1; }
	  : quote {  callCount \+= 1; }
	  : cast {   callCount \+= 1; }
	  : variableName { callCount \+= 1; }
	  : method { callCount \+= 1; }
	variableCallToken : element
	  : range {
	    ret.add(|new Range('element->"left"','element->"right"')|);
	  }
	  : braced {
		Statement subStatement = \getStatement(element,context);
		subStatement.brace();
		ret.add(subStatement);
	  }
	  : exact {
	    if element->"FLOAT" != null {
	      ret.add(|'element'+"f"|);
	    }
	    else {
	      ret.add(|'element'|);
	    }
	  }
	  : quote {
	    ret.add(|''element''|);
	  }
	  : cast {
	    String typeName = \getTypeName(element->"type_name");
	    Context typeContext = currentContext.getClassContext(typeName);
	    if typeContext == null {
		    throw "Could not find "+'typeName'+" type in context!";
		}
		
	    Statement castStatement = new Statement ();
	    castStatement.add(|$'typeName'|);
	    castStatement.brace();
	    Statement fullStatement = new Statement();
	    fullStatement.add(castStatement);
	    fullStatement.add(\getStatement(element->"statement",context));
		ret.add(fullStatement);
	  }
	  : variableName {
	  	currentContext = currentContext.link('element'); 
		if currentContext == null {
		    throw "Could not find "+'element'+" variable in context!";
		}
		
		if ret.size() == callCount {
		  ret.add(|'"set"+^element'|);
		}
		else if  ret.size() == 0 {
		  ret.add(|'element'|);
		}
		else {
		  ret.add(|'"get"+^element'()|);
		}
	  }
	  : method {
		String methodName;
		if element->"methodName" != null {
		  methodName = 'element->"methodName"';
		}
		else {
		  methodName = \getTypeName(element->"type_name");
		}
		Parameters parameters = new Parameters();
		element : atom
		  : statement {
			parameters.add(\getStatement(atom,context));
		  }
		if element->"NEW" != null {
          currentContext = currentContext.getClassContext(methodName);
		  if currentContext == null {
		    throw "Could not find \"+methodName+\" type in context!";
		  }
		  ret.add(|new 'methodName'(`parameters`)|);
		}
	  	else {
		  currentContext = currentContext.link(methodName);
		  if currentContext == null {
		    throw "Could not find "+'element'+" method in context!";
		  }
		  ret.add(|'element'(`parameters`)|);
		}
	  }
	if currentContext != null && currentContext.hasEnder() {
	  ret.add(currentContext.getEnder());
	}
	return ret;
  }


> Statement primeRange(IToken rangeToken){
    ~String left = 'rangeToken->"left"';
    ~String right = 'rangeToken->"right"';
    if rangeToken->"percent" != null {
      left  = \percentify(left);
      right = \percentify(right); 
    }
 	return |new Range('left'+"f",'right'+"f")|;
  }

> Statement getChance(IToken chanceToken){
    Double value = Double.parseDouble('chanceToken') / 100.0;
    return |\Math.random() <= 'value' |;
  }
> String percentify(String input){
	Double result = Double.parseDouble(input) / 100.0;
	return 'result';
  }
> String percentify(IToken input){
	return \percentify('input');
  }
> String negateOperator(String operator){
    if "==".equals(operator){
 	  return "!=";
 	}
 	else if "!=".equals(operator){
 	  return "==";
 	}
 	else if "<".equals(operator){
 	  return ">=";
 	}
 	else if "<=".equals(operator){
 	  return ">";
 	}
 	else if ">".equals(operator){
 	  return "<=";
 	}
 	else if ">=".equals(operator){
 	  return "<";
 	}
 	else if "&&".equals(operator){
 	  return "||";
 	}
 	else if "||".equals(operator){
 	  return "&&";
 	}
 	else {
 	  return "COULD NOT NEGATE ("+operator+")";
 	}
  }
> String determineType(IToken statement, Context context){
    if statement->"NOT" != null {
      return "Boolean";
    }
    else {
      if statement->"operator" != null {
        statement : element : operator {
          if 'element'.contains("&") || 'element'.contains("|") || 'element'.contains("==") || 'element'.contains("!=") {
            return "Boolean";
          }
        }
        statement : element : variable_call {
          element : atom : exact {
            atom : quark : NULL {
              return "Object";
            }
            : FLOAT {
              return "Double";
            }
          }
          : quote {
            return "String";
          }
        }
        return "Integer";
      }
      else {
        statement : element : variable_call {
          element : atom : range {
            return "Range";
          }
          : exact {
            atom : quark : NULL {
              return "Object";
            }
            : TRUE {
              return "Boolean";
            }
            : FALSE {
              return "Boolean";
            }
            : FLOAT {
              return "Double";
            }
            : INTEGER {
              return "Integer";
            }
          }
          :braced {
            return \determineType(atom, context);
          }
        }
        ~Context currentContext = context;
        ~String result = "State.Data";
        statement : call : variable_call {
          call : element : quote {
            result = "String";
            currentContext = context.getClassContext("String");
          }
          : variableName {
            if currentContext.hasLink('element'){
              result = currentContext.type('element');
              currentContext = currentContext.link('element');
            }
            else {
              System.err.println(''"Could not find variable "''\+'element'\+''" in context "''\+result);
              return "Object";
            }
          }
          : method {
            if element->"NEW" != null {
              result = \getTypeName(element->"type_name");
              currentContext = context.getClassContext(result);
            }
            else {
              if currentContext.hasLink('element->"methodName"'){
                result = currentContext.type('element->"methodName"');
                currentContext = currentContext.link('element->"methodName"');
              }
              else {
                System.err.println(''"Could not find method "''\+'element->"methodName"'\+''" in context "''\+result);
                return "Object";
              }
            }
          }
        }
        return result;
      }
    }
  }